for key, value in (breakpoints)
  @media screen and (min-width: value)

    // Display
    if utilities-display-responsive
      for prop in (utilities-display-values)
        .{prefix-global}{utilities-display-class}-{key}-{prop}
          display-scope(prop)

    // Flex
    // Flex: Direction
    if utilities-flex-direction-responsive
      for prop in (utilities-flex-direction-values)
        .{prefix-global}{utilities-flex-direction-class}-{key}-{prop}
          flex-direction-scope(prop)

    // Flex: Justify content
    if utilities-flex-justify-content-responsive
      for prop in (utilities-flex-justify-content-values)
        .{prefix-global}{utilities-flex-justify-content-class}-{key}-{prop}
          flex-justify-content-scope(prop)

    // Flex: Justify items
    if utilities-flex-justify-items-responsive
      for prop in (utilities-flex-justify-items-values)
        .{prefix-global}{utilities-flex-justify-items-class}-{key}-{prop}
          flex-justify-items-scope(prop)

    // Flex: Justify self
    if utilities-flex-justify-self-responsive
      for prop in (utilities-flex-justify-self-values)
        .{prefix-global}{utilities-flex-justify-self-class}-{key}-{prop}
          flex-justify-self-scope(prop)

    // Flex: Align content
    if utilities-flex-align-content-responsive
      for prop in (utilities-flex-align-content-values)
        .{prefix-global}{utilities-flex-align-content-class}-{key}-{prop}
          flex-align-content-scope(prop)

    // Flex: Align items
    if utilities-flex-align-items-responsive
      for prop in (utilities-flex-align-items-values)
        .{prefix-global}{utilities-flex-align-items-class}-{key}-{prop}
          flex-align-items-scope(prop)

    // Flex: Align self
    if utilities-flex-align-self-responsive
      for prop in (utilities-flex-align-self-values)
        .{prefix-global}{utilities-flex-align-self-class}-{key}-{prop}
          flex-align-self-scope(prop)

    // Flex: Fill
    if utilities-flex-fill-responsive
      .{prefix-global}{utilities-flex-fill-class}-{key}
        flex-fill-scope()

    // Flex: Grow
    if utilities-flex-grow-responsive
      for prop in (utilities-flex-grow-values)
        .{prefix-global}{utilities-flex-grow-class}-{key}-{prop}
          flex-grow-scope(prop)

      for prop in (utilities-flex-grow-counter_min..utilities-flex-grow-counter_max)
        .{prefix-global}{utilities-flex-grow-class}-{key}-{prop}
          flex-grow-scope(prop)

    // Flex: Shrink
    if utilities-flex-shrink-responsive
      for prop in (utilities-flex-shrink-values)
        .{prefix-global}{utilities-flex-shrink-class}-{key}-{prop}
          flex-shrink-scope(prop)

      for prop in (utilities-flex-shrink-counter_min..utilities-flex-shrink-counter_max)
        .{prefix-global}{utilities-flex-shrink-class}-{key}-{prop}
          flex-shrink-scope(prop)

    // Flex: Wrap
    if utilities-flex-wrap-responsive
      for prop in (utilities-flex-wrap-values)
        .{prefix-global}{utilities-flex-wrap-class}-{key}-{prop}
          flex-wrap-scope(prop)

    // Flex: Order
    if utilities-flex-order-responsive
      .{prefix-global}{utilities-flex-order-class}-{key}-{suffix-first}
        flex-order-scope((utilities-flex-order-counter_min - 1))

      .{prefix-global}{utilities-flex-order-class}-{key}-{suffix-last}
        flex-order-scope((utilities-flex-order-counter_max + 1))

      for prop in (utilities-flex-order-counter_min..utilities-flex-order-counter_max)
        .{prefix-global}{utilities-flex-order-class}-{key}-{prop}
          flex-order-scope(prop)

    // Flex: Gap
    if utilities-flex-gap-responsive
      for prop in (utilities-flex-gap-counter_min..utilities-flex-gap-counter_max)
        .{prefix-global}{utilities-flex-gap-class}-{key}-{prop}
          flex-gap-scope(prop)

    // Float
    if utilities-float-responsive
      for prop in (utilities-float-values)
        .{prefix-global}{utilities-float-class}-{key}-{prop}
          float-scope(prop)

    // Spacing
    // Spacing: Margin
    if utilities-spacing-margin-responsive
      for prop in (utilities-spacing-margin-values)
        .{prefix-global}{utilities-spacing-margin-class}-{key}-{prop}
          margin-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-top}-{key}-{prop}
          margin-top-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-right}-{key}-{prop}
          margin-right-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-bottom}-{key}-{prop}
          margin-bottom-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-left}-{key}-{prop}
          margin-left-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-x}-{key}-{prop}
          margin-x-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-y}-{key}-{prop}
          margin-y-scope(prop)

      for prop in (utilities-spacing-counter_min..utilities-spacing-counter_max)
        .{prefix-global}{utilities-spacing-margin-class}-{key}-{prop}
          margin-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-top}-{key}-{prop}
          margin-top-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-right}-{key}-{prop}
          margin-right-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-bottom}-{key}-{prop}
          margin-bottom-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-left}-{key}-{prop}
          margin-left-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-x}-{key}-{prop}
          margin-x-scope(prop)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-y}-{key}-{prop}
          margin-y-scope(prop)

      // Spacing: Margin negative
      for prop in (utilities-spacing-margin-counterNeg_min..utilities-spacing-margin-counterNeg_max)
        .{prefix-global}{utilities-spacing-margin-class}-{key}-{suffix-negative}{prop}
          margin-scope(prop, true)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-top}-{key}-{suffix-negative}{prop}
          margin-top-scope(prop, true)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-right}-{key}-{suffix-negative}{prop}
          margin-right-scope(prop, true)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-bottom}-{key}-{suffix-negative}{prop}
          margin-bottom-scope(prop, true)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-left}-{key}-{suffix-negative}{prop}
          margin-left-scope(prop, true)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-x}-{key}-{suffix-negative}{prop}
          margin-x-scope(prop, true)

        .{prefix-global}{utilities-spacing-margin-class}{suffix-y}-{key}-{suffix-negative}{prop}
          margin-y-scope(prop, true)

    // Spacing: Padding
    if utilities-spacing-padding-responsive
      for prop in (utilities-spacing-padding-values)
        .{prefix-global}{utilities-spacing-padding-class}-{key}-{prop}
          padding-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-top}-{key}-{prop}
          padding-top-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-right}-{key}-{prop}
          padding-right-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-bottom}-{key}-{prop}
          padding-bottom-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-left}-{key}-{prop}
          padding-left-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-x}-{key}-{prop}
          padding-x-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-y}-{key}-{prop}
          padding-y-scope(prop)

      for prop in (utilities-spacing-counter_min..utilities-spacing-counter_max)
        .{prefix-global}{utilities-spacing-padding-class}-{key}-{prop}
          padding-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-top}-{key}-{prop}
          padding-top-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-right}-{key}-{prop}
          padding-right-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-bottom}-{key}-{prop}
          padding-bottom-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-left}-{key}-{prop}
          padding-left-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-x}-{key}-{prop}
          padding-x-scope(prop)

        .{prefix-global}{utilities-spacing-padding-class}{suffix-y}-{key}-{prop}
          padding-y-scope(prop)

    // Text
    // Text: Text align
    if utilities-text-align-responsive
      for prop in (utilities-text-align-values)
        .{prefix-global}{utilities-text-align-class}-{key}-{prop}
          text-align-scope(prop)

    // Visibility
    if utilities-visibility-responsive
      for prop in (utilities-visibility-values)
        .{prefix-global}{utilities-visibility-class}-{key}-{prop}
          visibility-scope(prop)

    // Helpers
    // Helpers: Visually hidden
    if helpers-visually-hidden-responsive
      .{prefix-global}{helpers-visually-hidden-class}-{key},
      .{prefix-global}{helpers-visually-hidden-class}-{suffix-focusable}-{key}:not(:focus):not(:focus-within)
        visually-hidden()

    // UI
    // UI: Container
    .{prefix-global}{ui-container-class}-{key}
      container-base(spacer / 2, containers[key])

    .{prefix-global}{ui-container-class}-{key}, .{prefix-global}{ui-container-class}
      {utilities-sizing-max-width-property}: containers[key]
